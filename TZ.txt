###############
# Уже сделано #
###############

Создать консольное приложение, которое ждет ввода строки.
Есть парсинг знака вопроса. Будет переделываться.
Так же существует граф слов. Слова - вершины. Ребра - связь (состояние в одном предложении), пока не понятно как будут представлены другие типы связей. Слова будут заменяться на понятия, знаки.
Все незнакомые слова попадают в граф.
Создание двух окон - в одном вопрос - ответ, в другом информация для отладки. Сейчас это расширение в vs code.

###############################################
# Краткосрочная перспектива (день разработки) #
###############################################

1. Переписать узел (вершину) на класс, а не только строка в графе.
    Сделать метод для отображения в графе. Название в ковычки и стрелки, с чем был связан или будет связан. Сначало только был, с чем будет связан, это дальнейший функционал вопроса. Нужно для хранения и исполнения кода внутри узла. Позже будет меньше кода в каждом узле, больше узлов. Класса для связи не будет. Если нужны различные части речи, можно поле в классе завести. Код внутренней программы может отличаться у разных частей речи. От узла к узлу передается только факт связи. 

2. Операции над вершинами и связями. Чтение, создание, удаление, изменение.
    Без деления на вопросы и ответы. Все в режими впитывания в себя.

3. Выделение локальной и глобальной памяти.
    Связь между узлами, может говорить, что они связаны в одно предложение. Находятся в одном контексте. Как могут выглядеть разные виды контекста (удаленность от текущей временной ветки) - отдельная задача.
    Делим ли мы стрелки на типы? Пока не делим, т к нет необходимости.
    Хранение истории в глобальной памяти. Привязка событий ко времени. Как по контексту, так и методанные. Хранить источник данных (из знака или внешней среды). Способ вывода из старых знаний. Время придется хранить как в опретивке, так и в глобале.

4. Код для вопросов и ответов.
    Повествование - только операция чтения над памятью. Ответ на вопрос может быть повествованием, соответсвенно это тоже чтение памяти. Когда не ответа на вопрос в памяти, может включаться генерация новых знаний, но это отдельная задача. В током случае должно говоритья, что нет ответа.
    Составление полного списка всех возможных слов, обозначающих форму вопроса и ответа. (Кто, что, где, почему и т д.) Найти список у учебнике русского и других языков.
    Как выглядит связь с вопросом в предложении?
    После детектирования вопроса, должна быь операция чтения.
    Отличеие вопроса от невопроса - знак вопроса в конце (в начале). Позж распознавание по вопросным словам. Риторические вопросы. Понимание желение собеседника. Эмулирование его в памяти.
    Вопрос системы - желание пополнить граф (отсутствие информации в графе на заданные впросы человеком).

5. Истинность и ложность высказываний, закономерностей, гипотиз. 

6. Генерация новых знаний.
    Должна включаться каждый раз, когда нет ответа в памяти. По сути мы ее ограничиваем в выводе.
    Отработать на задаче непосредственного менеджера. Пример с генерацией новых знаний. Напрямую связи между элементами не определены, но можно спросить систему через элемент.
    Один из вариантов, что знания заключаются в новых связях. Так же можно выделить новые знания в новых элементах. Например выполнилась мини программа внутри одного узла, и т к ответ представляет из себя ни разу не использованное слово, то сделать под него новый узел и выдать его за ответ. С цифрами сложнее. Под каждую новую цифру нет необходимости создавать новый узел. Все они попадают под определение цифры. Можно создать локальный узел, для ответа, т к в оперативке он новый. Потом забыть или запонмить факт возможного решения.
    Проверить генерацию новых знаний на сказке о колобке. От кого еще может уйти колобок, помимо перечисленных вариантов. (ответ от кого угодно). А если в рот попросят прыгуть? (ответ - ни от кого не уйдет, кроме того, кто попросил в рот прыгнуть).
    Можно воспринять как факты, для выработки знаний. (колобок от бабушки ушел,     колобок от дедушки ушел, колобо от зайца ушел, колобок от лисы не ушел). Если выделяестся закономерность (колобок от всех уходит), то она должна как-то записываться (в виде правила)?
    Так же еще есть язык даталог. Есть ли необходимость заключения его внутри узла? Пока не вижу. Он хороший пример ограничеий (правил), которым нужно соответсвовать, чтоб сделать вывод, дать ответ. Правила могут быть записаны на графе или в вершинах?
    Отдельная задача, но в данной группе - выделение правила из закономерности и запись на графе. Можно сначала без графа. Умение обобщать. Дедукция и индукция. + еще несколько по методичке викентьевой. Почитать статью на википедии о наукометрии.
    Фишка знаний в том, чтобы генерировать новые знания по имеющимся правилам.
    Бесполезно переписывать все возможные комбинации входов и выходов.
    Колобок ушел от бабушки? Колобок - сущность, вершина. Бабушка - сщность вершина. Ушел - оператор? можем ли мы ноые занияния сгенерировать? Или это только повествование. Пересказ это оператор? (нет. Новых заний нет, если новые зания есть, это уже не пересказ). Если появляются новая информация - значит оператор. Если не появляется - пересказ, повествование. Занния можно генерировать не только на цифрах, но и судить от кого еще уйдет колобок.

7. Синонимы

8. Добавить создание определения и названия знака из других знаков.
    Словосочетания.
    Определение знака в виде текста. Для начала в виде списка знаков.

###################################
# предметные области для парсинга #
###################################

1. Пространство - время
    Начинать хранение информации с помощью простых понятий, например что где находится (транспорт, геометрия, пространство, расстояние как ресурс). Теория игр кстати вспоминается. Мироощущение у ребенка.

1. Сказка про колобка
    Поискать сказки для детей 3 лет (для самых маленьких).

2. Арифметика

3. Задача сколько яблок
    Во первых, уровни вложенности. Маша и Катя находятся в комнате. И у них есть яблоки. Сколько всего у них яблок вмсте.
    Сложение. У кати 3, у маши 2. Сколько всего. Дублируется с задачей по программированию.
    решение логических задач
4. Задача непосредственного менеджера

5. Учебник по программированию
   Обучение программированию, как предметной области.
   Перевод задач по программированию с ЕЯ на ЯП.
   Выделение тех структур данных, которые не только в программировании. Схематичный рисунок.
6. Учебник по русскому языку

8. Придумать свою историю.
    Заставить генерировать историю. Фантазия? Планирование? Целеполагание? Какие 4 графа у МФТИ? (событие, роль - это типы знаков)

####################################################
# Недельная перспектива (доделать в следующий раз) #
####################################################

Отработать сценарий нового понятия

Вывод определения из простых слов

Во время подгрузки в оперативку, подгружаются ассоциации, но не все. Для возможного использования. В зависимости от глубины. Контекст между предложений

Юмор - резкие связи с контекстом. Попробовать написать программку, которая преследует цель, оперируя понятиями (желание пошутить)

Слова обозначающие движение, слова обозначающие препятствия. Словестное описание по виртуальной карте со своими законами.

Методы отображения и хранения в бд для класса.

конвертация сказки про колобка в граф

попытаться дать определение через уже имеющиеся слова

парсинг вхожной строки с помощью библиотек. Готовнось обойтись без библиотек. Похожие буквы, опечатки, учет информации из ненормальной формы слова.

Когда-то хотел начать с цифр и операциях над ними (это в отншении типа связи и кода , хранящегося в узле) (в то же время, код оперций должен быить не в узле, а на языковом уровне) (оператор + должен быть отдельным узлом)

Все таки попробовать позже парсинг колобка

синонимы. Это просто ссылка или отельное понятие, и у ссылки есть степень выраженности. Может быть только чать понятия синонимична. В током случае нужна операция сравнивания всего со всем.

#####################################################################################
# Долгосрочная перспектива (тезисы, которые надо реализовать, но не понятно еще     #
# как и когда)                                                                      #
#####################################################################################

Создание нескольких агентов. Экспремент с изменением кода на другом агенте (жизнеспособность).

Функция и свойство.

Научить учиться

Юмор - резкие связи с контекстом

Слова обозначающие движение, слова обозначающие препятствия.

1 2 3 слово (цифры). Даём определение 3 за счёт 2. Продумать добавление 1 и связь с 2. Или перестройка определения.

причина-следствие

Начало учебника по программированию. Как текст для парсинга.

Что будет, если все будет связано со всем - все нормально в голове связано все что нужно и не умираем. С математической точи зрения все со всем и не будет связвано.

Риторические вопросы

7. Перерограммирование себя.

################################
# Советы по организации мыслей #
################################

1. Оперировать понятиями, а не словами.

2.  Объяснение почему есть код в узле, хотя мы заявляем что должны обойтись без кода.
    
    2.1 Уже есть досаточно большой объем кода написанный людьми. Было бы глупо его не использовать.
        
        Вспомним арифметику. Знания о том как складывать числа уже имеются и зашиты в операторе плюс. Мы используем времмно это готовое решение на ЯП. Есть куча других языков, например грфический или нейросетевой, которые могут предоставить альтернативное решение для знака. В начале мы еще не знаем альтернативных методов и все они тоже должны будут быть записаны словесно.

        Даже если мы используем ЯП в определении. То выход этой минимпрограммы должен максимально использоваться в языковом уровне. То есть, связи до узлов, новые узлы.
    
    2.2 Понятие может быть программой. Можно ли избавиться от программ в понятиях? Как программы представлены в голове - нейронами. Один нейрон - не одно понятие. Даже сами понятия это небольшие сетки. Поэтому в каждом понятии в перспективе будет программа внутри или сетка. Важное отличие от всего, что хранится внутри - наличие названия (заголовка), как все это представлно в языке.
    
    2.3 Как должен выглядеть процесс написания программ внутри узлов. На ЯП, тут все понятно. На понятиях, должно использоваться минимальное количество кода. Понятие выглядит как последовательность узлов и связей между узлами, все это сохранено под одним адресом (заголовком). Да, в каждом узле может быть код. Но интерес в том, что при оперировании понятиями, чье определение состоит из других понятий - кода нет. Назовем оперироваие понятиями, в которых уже нет кода - верним уровнем или языковым. Да, программа определения знака это подграф в графе.

    Программа может писаться как на языковом уровне так и на языке программирования
    К написанию на чистом языке мы сейчас не готовы. На верхнем уровне вообще не будет ЯП.

3. Можно свести все к if-else.
    Соглашусь. Думаю все это сводится к коннекционизму. Можно вспомнить язык даталог, на котором храняться ограничения и делаются логические выводы. Там все к ифам сводится. У нас есть ифы, которые администрируют граф. От данного подхода, откажемся, когда перейдем к верхнему уровню.

#####################################
# Возможно используемые библиотетки #
#####################################

pymorphy2 - привод слова к нормальной форме
nltk - разбиение на предложения и слова (токенизация), удаление лишних слов, нормальная форма
rutermextract - выделение ключевых слов
PyMystem3 - еще привод к нормальной форме (лематизация), но надо по несколько предложений, чтоб быстро
