----------------
останавливаемся тогда на этой модели
кодим
+ кодим отрисовку
учимся чисттить локальный граф
в глоальном все связи остаются? ДА
даже с мета узами, узлы ведь когда-то были добавлены как то
никто не заставляет все отрисовывать
ну и да, метаузел решает с кем и когда протягивать связи
например во фразе 
"сохрани_узлы время 1658921962"
не очевидно, что между сохрани_узлы и 1658921962
нужно делать связь, а она там должна быть
------------------
приехал в магнитку, кодю
первое утверждение
"сохрани_узлы время 1658921962"
первое слово ищется в списке джесонов и выполняется
оставшиеся слова воспринимаются как входные параметры
код первого слова выполнится, создадутся 2 узла
в принципе мы их тоже можем запустить, но в них нет кода

опять возникли опасения, что это похоже на ЯП
Да, это действительно так, но позже мы его существенно расширим и переопределим
дайте только денег)
поместить в соответсвующий раздел в тз

мне нужно после узла сохрани_узлы вернуть ответ, чтоб другие узлы не выполнялись!!!!

отлично
первую строчу по созданию узла сделал
не сделал проверку, если нода существует
не сделал отображение
не сделал разделение на локальный и глоб граф

зачем я ввел ключевые слова:
ЗА:
- любое предложение исполняется, не важно вопрос, ответ или дача определеня, запись определения. Ввод доп режима, которое не входит в состав предложения приведет к тому,
что придется позже код из режима переносить в слова (понятия)
- сценарии одного и того же слова могут быть различны в зависимости от окружающих слов (параметров). Больше параметров, гибче реакция.
ПРОТИВ:
- когда человеку говорят предложение, у него поднимается сразу весь код слова, ограниченный контекстом. (мы так не сможем)
Вывод определений не производится (рекурсивоное проваливание)
- 

еще раз порядок выполнения программы
выполняю все слова в строчке
нахожу первый json
в нем нахожу питон и 
передаю ему оставшиеся параметры
в питне принимаю решение как обрабатывать оставшиеся параметры
если среди параметров есть еще выполняемые слова
то выполняем их и передаем оставшиеся слова и т д

возникают частоиспользуемые функции
например найди программу по названию через все дсоны

нужно понять как результат выполнения наверх передавать
в нем должно содержаться в том числе, что некоторые слова , может и все, не нужно выполнять
потренироваться на сохрани узлы

походу субпроцесс параллельно запускает все слова на выполнение
надо в начале функции выполнения слов что-то придумывать

------

пусть запускаются все слова
внутри слов написать код, с какими соседями работать не надо
если вычисли с параметрами, то 3 и 4 параметр
пофилосовствовать, какие слова человек не стал бы обрабатывать и откуда берет инфу

Каждое слово должно заниматься своим делом
Решил
Код должен выполняться последовательно
Сначала помечаем параметры, потом передаем минусу
Обратная сторона - параллельное выполнение
Тогда каждое слово учитывает контекст и выполняет работу, которая дублируется в каждом слове в предложении
В этом есть и плюс - доп проверка в каждом слове
Записать этот подход в комментариях в коде
Еще о параллельном подходе
3 из 4 слов не должны будут вернуть результат
значит они бесполезно отработали, еще раз удостоверяюсь в правильности последовательного подхода


------

тут выясняется, что есть предложения, где порядок важен, а есть где не важен

например 
3 минус 2
и
2 минус 3 
принципиальная разница

а
машка вредина, отдай
или
вредина машка, отдай

без разницы

-----

можно конечно сейчас и сделать последовательно,
но потом придется переделывать

1658921963 разница 1658921962
придется вызывать первое слово,
в нем не будет кода
потом второе и в нем брать первый параметр из контекста
-------

подумать над отладкой субпроцессных файлов
разработать шаблон с ифнейммейном и меняющимися параметрами запуска в
 зависимости от каталога

------

листочке нарисовать пайплайн

-----

сейчас сохраняются ссылки только при сохранении узлов
а должны при любой реплике

второй вопрос, в какой файл они записываются
записываются в сохраняемое слово + добавляется сохрани узлы

сохрани узлы в первую очередь формирует json
выполни параметры отсутсвует в графе, потому что я его руками добавлял
в выполни параметры все равно отсутсвют ссылки на продолжающуюся строку

получается, перед выполнением любой строки мы пробигаемся по словам и добавляем 
ссылки все ко всем

где в таком случае будет разгроничение на глобальный граф и локальный
эти ссылки в json должны были использоваться такт то только для определения
от того что мы строим локальный граф нам не важно
может локальный грфаф в файл xdot сразу писать?
Нет, писать всю инфу удобней в json
нужно просто разжелить поля
link переименовать в local_graph
для секунды добавить defenition
последнюю строчку тем не мнее искать не по всем файлам с defenition
хотя он такой один у нас, а по наложению на граф

итак, итожу
link переименовать в local_graph
для секунды добавить defenition, помимо local_graph
local_graph заполняется в майне все слова со всеми
если слова нет, то тогда создается
получается убираем сохрани узлы (о ужас), нет оставляем там еще питон и 
сохранение результатов после выполнения, хотя о этом ндо тоже подумать

еще раз не к месту
от ключевых слов до конца не отказываюсь
отказываюсь от сохрани узлы, т к он в каждой строке и Так
в файле графа все равно не пишу, т к в json можно зайти посмотреть
и все что угодно дополнить

потом чтение операций над графами
поиск по джейсонам через джейсон не охота заниматься
файл графа все же остается и генерируется
его можно покрасивше сделать без дублей и 
сразу дописывать по ходу выполнения, а не пробегать по всем словам 
каждую итерацию

вохзник вопрос может вместо хранения в каждом файле local_graph
хранить это в файле графа
ответ - нет, тогда файл графа нельзя будет потерять
придется пробегаться по фалам, чтоб чистить это поле после диалога
где -то должен быть список всех задействованных слов
нужна автоматическая очистка при каждом запуске
тогда, да, придется переписываться в файл графа
помниться ты от этого уйти хотел
неужели нужно свой формат хранени графа
нет
просто я буду обрабатывать выход
мне все же удобно работать, и смотреть, что происходт с каждым понятием в файле
заведу список всех задействованных понятий
буду перед выходом чистить
по файлу графа можно пробежаться (лучше по списку)
если аварийное завершение, 
то при любом запуске придется пробегаться по всем ловам и чистить поля
параокс
либо удобство работы с фалом, либо централизованное хранение
по логике должно победить второе
значить не просто меняю link на local_graph
а перенашу запись в файл
делаю ее адекватоной
посмотреть как сейчас отрисовка происходит
тут походу не на 15 мин, на сегодня все

еще один переходник
можно же не сразу в граф писать, а в json
отказываюсь


-----
09,10,2022
я же хотел уйти от записи в .dot
потому что там есть ограничения на отрисовку
можно сделать промежуточный вариант хранения и подключить .dot за не имением альтернатив пока
скорей всего я опять скланюсь к json
только это не распихано по файлам, а в одном
обе цели выполняются: и централизация и незапись в .dot

-------
10 10 2022

при сохранении связей во входном предложении
отказываюсь делать связи все со всеми
мешанина получается, пробовал на графе иллюстрации
последовательно буду

-------
11 10 2022
все слова в предложении конвертируются в последовательные пары
после обработки возможно проведение новых слов
определения зписываются в json слова (в первую очереь), в локальный_граф.json тоже, но только для отрисовки
новые связи тоже могут появляться после обработки

-------
15 10 2022
во время сохранения определения
пробрасывать связи с определяемого слова на все слова учавствующие в определени


заметки

задача: глубина рекурсии больше 1, для ответа

удаление вершин при добалении истинности или ложности и при переводе в глобальный