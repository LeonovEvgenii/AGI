1.0 Определение

    Существует классификация деления ИИ на сильный и слабый.
    Начнем со слабого. Его еще узким видимо называют. Процитирую.
     "Artificial Narrow 
    Intelligence (ANI): это ИИ специализирующийся на (удалить пробельчик) 
    конкретной задаче/проблеме. И, зачастую, превосходящий человека в 
    решении этой задачи. Например, шахматная программа обыграла человека, но 
    она умеет только это. Речь идёт о различного рода экспертных системах, 
    как правило, работающих с большими объёмами данных." Сильный - 
    программа, обладающая рядом обязательных черт или свойств: память, 
    целеполагание, принятие решения, планирование, вывод новых знаний, 
    общение. Позже, допускаю, что могут быть добавлены черты или изменены 
    существующие. Оять же есть множество источников, где его 
    пытаются дать. Его же иногда называют общим. Artificial General 
    Intelligence (AGI).

2.0 Актуальность

    Сейчас существет много тел роботов, которые обладают достаточно продвинутой 
    механикой для решения общих задач. Но отсутвие сегмента программ сильного ии 
    не позволяет им выполнять эти задачи. Их программы часто базируются на 
    автоматах и не подразумевают большой изменичивости или дообучения не ходу.
    Посмотрим несколько примеров. Бостон динамикс объявила о желании создания 
    подразделения, занимающегося вопросами ии. Еще 
    раз констатировала, что атлас всего лишь научный инструмент и тацует по 
    заранее заложенной программе. Четкое выделение предметных областей в будущей 
    разработке, скорей всего приведет к "слабому" ии.
    https://www.youtube.com/watch?v=InvCCX4W8_Y
    еще один пример. Проект google everyday. его создатели подчеркивают, как я понял, 
    сложность решения бытовых задачь. Они пытаются собрать робота из 
    общесдоступных комплектующих.
    https://everydayrobots.com/
    Многие компании (например toyota) пыталась делать антропоморфного помошника 
    для дома, но возможности этих роботв далеки от человека.
    Думаю, что проблема актуальна.

3.0 Текущие подходы

    Рассмотрим несколько методов приянтия решений в ИИ, их достоинства и недостатки.

    3.1 Нейросетевые методы
        Были рассмотерны эти статьи.
        https://habr.com/ru/post/468379/
        https://habr.com/ru/company/neurodatalab/blog/335238/
        https://habr.com/ru/post/437020/
        Есть несколько видов нейросетевых методов.
        Обучение с учителем. Часто применяется в классификации картинок.
        - Первый недостаток, который я выделю - наличие датасета. Его на текущий 
        момент готовят люди. Не для всех предметных областей они есть. 
        Большинство бытовых задачь уже понятно как делать и нужно только 
        объяснить машине как их делать. По крайней мере так мы поступаем с 
        детьми. Человек учится на длине датасета 1 ну может быть 10. Датасеты 
        однозначное зло.
        - Второе - невозможность вытащить сформулированные правила из обученной 
        сети. У сверточных сетей с этим проще, т к на промежуточных картах 
        активации можно увидеть, какие места на картинке оказались важными. Но 
        карта активации - это даже не картинка. Это места, где фильтр свертки 
        дал большие числа. На первых слоях будет белеберда - маленькие 
        геометрические черты картинки. Забегая вперед, скажем, что понимать 
        почему сеть принила то или иное реение - очень хочется, если не сказать 
        жизненно необходимо, для дальнейшей настройки сети. Выделился термин - 
        объяснимый ИИ. Вспоминается проект гугла.
        https://cloud.google.com/explainable-ai/
        Судя по картинке, они как раз показывают промежуточные слои, хотя, я 
        сильно не вчитывался. Как минимум важен факт выделения термина, 
        заинтерисованности гугла. Есть проекты изъятия правил из сети в виде 
        математики. Это опять же предназначено для человека. Есть еще обучение 
        без учителя. В нем я не сильно разбираюсь, но думаю, что ситуация схожа, 
        как с другими типами сетей. Обучение с подкреплением. (Reinforcement 
        Learning) 
        + Достоинством является то, что ему не нужен датасет. По сути он его на 
        ходу собрает. В принципе, если бы человек учился неизвестному, то он бы 
        тоже делел случайные ходы и смотрел чтоб будет. По сути RL это 
        статистика. Процетирую некоторые выводы из статьи в частонсти для RL.
        - Медленная адаптация к изменяющемся условиям среды. Тут, думаю, нужно 
        оговриться, что адаптация есть, но она не достаточно быстрая, как того 
        может требовать окружающий мир. С точки зрения аналитических методов у 
        сетей наблюдается большая адаптивность. 
        - Сложные модели требуют большого объема сетей. В статье, опять же, есть 
        пример обчения тела ходьбе с 17 степенями свободы. При увеличении 
        степеней свободы, не получатется нормально обучить. Для анализа большой 
        сети требуется еще большая сеть.
        - Не все сети могут крутить циклы.
        - Необходимо созадавть раздел или добавлять рекурентную сеть для учета 
        предыдущих состояний.
        - Большая вычислительная сложность для определенных задачь. 
        - Непереносимость опыта из одной сети в другую. Есть медод, когда 
        обученную сеть подключают на вход другой сети (transfer learning). 
        Перенос возможен только так.
        - Необходимо время на обученение. Часть опыта у людей передается по 
        наследству, но это связано скорее с управлением организмом. Часть 
        передается с воспитанием и длится порядка 20 лет. С учетом накопленного 
        опыта дообучение может происходить буквально в пару предложений. 
        Перечисленные выводы по отдельности не фатальны, но в сумме подпекают.
        Общие свойства нейросетей.
        - Общая проблем состоит в необходимости длительного обучения. Есть вид 
        обучения incremental learning. Он подразумевает постоянно постоянно 
        расширяющуюся модель при новых входных данных. Я не слышал об его болшом 
        распространении.
        - Еще один недостаток - возможность переобучения. В большей степени 
        касается больших стетей.
        - Обучать приходится сразу всем задачам. Иначе при дообучении веса 
        перезапишутся под новую задачу.
        - Невозможность интеграции отдельных сетей в одну большую. Т к они имеют 
        разные архитекуры, абсолютные значения весов, механизмов общего обучения.
        В статье, описывается предположение о том, чтобы сверточные для 
        картинок, рекурентные для текста и обучение с подкреплением для 
        генерации движений использовались вместе. Даже если ону сеть 
        присоединяют  другой, то у одно из них, которая уже обучена веса 
        замораживают.
        - Необходимость разработки архитектуры еще до начала обученя. Допускаю, 
        что есть проекты, где сеть конфигурирует архитектуру, но я не видел, 
        чтобы они получили распространение.
        - Возможность ложного реагирования. Вытекает из невозможности просмотра 
        вывода принятого решения.

    3.2 Логическое программирование.

        Этот метод ИИ можно обобщить до набора ifов. Его еще часто называют 
        экспертными системами. Эксперт (человек, компетентный в предметной 
        области) составляет правила, через которые пргоняются входные данные
        и область принятия решений сужается. Иногда до конкретного решения,
        иногда до множества решений, иногда до ни одного.
        достоинства.
        1) Это точный метод, при одинаковых входных условиях будет один и 
        тот же результат.
        Процесс принятия конкретного решеня можно проследить, что легло в 
        его основу и почему оно было принято.
        2) Отпыт накопленный специалистами легоко передается машине, 
        через добавление новых условий и корректировки имеющихся.
        Недостатки.
        1) Экспертная система требует постоянного обновления своей базы 
        знаний.
        2) Неумение выявлять новые неизвестные ситуации.


    3.3 Нечеткая логика

        Является определенной надстройкой к логическому программированию.
        Некоторые авторы выделяют ее в отдельный матод. Добавляет возможность
        дробного значения выраженности признака. Не true или false, а например 0.3.
        Для работы на признаками требуются доработаннные операторы.
        Достоинства.
        1) Большая гибкость в незнакомой ситуации.
        2) Остается возможность объяснить решение по вызванным правилам.
        Недостатки.
        
1. Необходимость составлять базу правил и выделять множества с привлечением эксперта.
2. Обновление базы правил из-за отсутствия самообучения.
3. Нечеткие системы не дают точных ответов даже без фазификации.


    3.4 Генетические алгоритмы
    +1. Подходит для. неформализованных задач
2. Высокий параллелизм.
-
1. Приближенный метод.
2. Качество решения зависит от времени расчета.

    3.5 Статистические методы
    +
    1. Не требуют точных данных для составления выборки.
2. Обоснованность решений.
3. Простота в эксплуатации.
-
1. Необходима длинная статистическая выборка.
2. Решение принимается не в зависимости от состояния объекта, а от истории выборки.
3. Не работают без шаблона типичного поведения.


    3.6 Ассоциативная память

    +
    1. Самоорганизующаяся система.
2. Адаптируется к изменениям.
-
1. Необходима обучающая выборка.


    3.7 Выводы


Перечислим основные недостатки, которые не допустимы при выборе метода для системы управления МРК и системах ему подобных [4, 6].
1) Невозможность объяснения решения, так как трудно будет понять как настраивать систему на работоспособность, кроме как экспериментальным методом. В противном случае, придется создавать систему объяснения решений, которая может быть больше и сложнее, чем сама исследуемая система.
2) Неточность принимаемого решения, так как решение необходимое для результата может содержаться в нерассмотренной области.
3) Необходимость обучающей выборки. Она может быть мала и на ее подготовку нужны ресурсы.
Нейронные сети имеют весомые достоинства, но их нельзя применить из-за 1-го и 2-го пунктов. Ассоциативной памяти и статистическим  алгоритмам тоже нужна выборка. Генетические алгоритмы — не могут объяснить решение и являются приближенным методом.  Сигнатурные методы нуждаются в постоянном обновлении базы и не адаптивные.
В качестве основы остается выбрать логическое программирование. Оно дает обоснованность решений, выдачей применимых правил. Принимает решение точно, так как основывается на опыте экспертов. Не нуждается в большой обучающей выборке, так как правила будут емко содержать законы предметной области. Нечеткую логику можно расценить как надстройку над логическим программированием, потому что оно использует тип данных — нечеткое множество и соответствующие операции над ним, что может помочь в незнакомых ситуациях принять системе решение, когда обычные правила не дадут положительного ответа.
Системы написанные с помощью логического программирования и правил, составленными экспертами, называют экспертными системами (ЭС). В ЭС знания представляются в виде правил.
Одним из достоинств интеллектуальных систем является их адаптивность и способность к самообучению. Такими свойствами обладают нейронные сети, генетические алгоритмы и ассоциативная память. Но в связи с описанными выше недостатками их нельзя использовать в качестве основы. Если основная экспертная система не сможет выдать определенное решение, то можно прибегнуть к генерации новых правили или выдачи приближенного решения с помощью одного из выше упомянутых методов.
Возникает необходимость в разработке собственной ЭС. По одному из требований технического задания, разработка должна вестись с помощью Python3 и pyDatalog. Используя ЛП мы приобретаем ряд преимуществ по сравнению с языками высокого уровня при написании программ.
При попытке найти ответ на запрос, pyDatalog будет автоматически искать правила или факты, которые могут вернуть результат на запрос, иначе  это пришлось бы делать вручную, прописывая алгоритм. Если решения не найдено, то будет дан ответ об отсутствии такого утверждения. Например, удобно писать рекурсивные функции, выход из которых и условия проваливания pyDatalog контролирует сам, не нагружая программиста. Обеспечивается более высокий уровень абстракции и человеку проще переводить свои мысли в инструкции для машины и контролировать ход выполнения программы.
Приведем пример реализации одного из сценариев. Представим поле из 9 клеток. Робот находится в центральной. Ему необходимо тронуться. Тронуться он может вперед, назад или с отклонением по диагонали. То есть, вперед и влево или назад и влево. Сразу в левую или в правую клетку он двинуться не может. Пусть в передней левой клетке находится препятствие, из за которого робот не может туда попасть.
Программа на подобном даталогу языке, представлена на листинге 1.
from pyDatalog import pyDatalog
pyDatalog.create_terms('Start, X')
Start['Forfard_left'] = 'Препядствие'
Start['Forfard'] = 'Нет препядствия'
Start['Forfard_right'] = 'Нет препядствия'
Start['Back_right'] = 'Нет препядствия'
Start['Back'] = 'Нет препядствия'
Start['Back_left'] = 'Нет препядствия'
print(Start[X]=='Нет препядствия')
Листинг 1. Программа на pyDatalog.
Аналогичное решение задачи на императивном языке, представлена на листинге 2.
d = {'Forfard_left': 'Препядствие', 'Forfard': 'Нет препядствия', \
'Forfard_right': 'Нет препядствия', 'Back_right': 'Нет препядствия', \
'Back': 'Нет препядствия', 'Back_left': 'Нет препядствия'}
for i in d:
 if d[i]=='Нет препядствия':
  print(i)
Листинг 2. Программа на Python3.
На выходе обоих программ будет список мест, куда может поехать робот. То есть везде, кроме Forfard_left, так как там препятствие.
Таким образом, применение pyDatalog  облегчает разработку и повышает читаемость программы и является удобным инструментом для написания интеллектуальных систем управления для автономного функционирования робота.



        Мне достаточно было их факта существования, чтобы сделать выводы и забыть.
        


Предлагаемое решение

    графовый компьютер

    тз в предложение включить

    Посмотреть можно ли дополнить тз этими свойсвтами
    https://en.wikipedia.org/wiki/Artificial_general_intelligence
    https://ru.wikipedia.org/wiki/Сильный_и_слабый_искусственные_интеллекты