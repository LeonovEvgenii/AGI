1.0 Определение

    Существует классификация деления ИИ на сильный и слабый.
    Начнем со слабого. Его еще узким видимо называют. Процитирую.
     "Artificial Narrow 
    Intelligence (ANI): это ИИ специализирующийся на (удалить пробельчик) 
    конкретной задаче/проблеме. И, зачастую, превосходящий человека в 
    решении этой задачи. Например, шахматная программа обыграла человека, но 
    она умеет только это. Речь идёт о различного рода экспертных системах, 
    как правило, работающих с большими объёмами данных." Сильный - 
    программа, обладающая рядом обязательных черт или свойств: память, 
    целеполагание, принятие решения, планирование, вывод новых знаний, 
    общение. Позже, допускаю, что могут быть добавлены черты или изменены 
    существующие. Оять же есть множество источников, где его 
    пытаются дать. Его же иногда называют общим. Artificial General 
    Intelligence (AGI).

2.0 Актуальность

    Сейчас существет много тел роботов, которые обладают достаточно продвинутой 
    механикой для решения общих задач. Но отсутвие сегмента программ сильного ии 
    не позволяет им выполнять эти задачи. Их программы часто базируются на 
    автоматах и не подразумевают большой изменичивости или дообучения не ходу.
    Посмотрим несколько примеров. Бостон динамикс объявила о желании создания 
    подразделения, занимающегося вопросами ии. Еще 
    раз констатировала, что атлас всего лишь научный инструмент и тацует по 
    заранее заложенной программе. Четкое выделение предметных областей в будущей 
    разработке, скорей всего приведет к "слабому" ии.
    https://www.youtube.com/watch?v=InvCCX4W8_Y
    еще один пример. Проект google everyday. его создатели подчеркивают, как я понял, 
    сложность решения бытовых задачь. Они пытаются собрать робота из 
    общесдоступных комплектующих.
    https://everydayrobots.com/
    Многие компании (например toyota) пыталась делать антропоморфного помошника 
    для дома, но возможности этих роботв далеки от человека.
    Думаю, что проблема актуальна.

3.0 Текущие подходы

    Рассмотрим несколько методов приянтия решений в ИИ, их достоинства и недостатки.

    3.1 Нейросетевые методы
        Пояснять, как работают данные методы не буду.
        Были рассмотерны эти статьи.
        https://habr.com/ru/post/468379/
        https://habr.com/ru/company/neurodatalab/blog/335238/
        https://habr.com/ru/post/437020/
        Достоинства.
        1) Отсутсвие датасета для определенных видов сетей. Касается 
        обучения с подкреплением (Reinforcement Learning). Ему не нужен 
        датасет. По сути он его на ходу собрает. В 
        принципе, если бы человек учился неизвестному, то он бы 
        тоже делел случайные ходы и смотрел чтоб будет. По сути RL это 
        статистика.
        2) Выделение закономерностей. Сеть может выделить те закономерности
        которые людьми сложно формализуемы.
        3) Устойчивость к шумам.
        4) Возможность прогнозирования.
        Недостатки.
        1) Неободимость датасета. Это касается обучение с учителем. 
        Часто применяется в классификации картинок. Для него необходим датасет. 
        Его готовят люди. Не для всех предметных областей они есть. 
        2) Невозможность вытащить сформулированные правила из обученной 
        сети. У сверточных сетей с этим проще, т к на промежуточных картах 
        активации можно увидеть, какие места на картинке оказались важными. Но 
        карта активации - это даже не картинка. Это места, где фильтр свертки 
        дал большие числа. На первых слоях будет белеберда - маленькие 
        геометрические черты картинки. Есть метод, когда 
        обученную сеть подключают на вход другой сети (transfer learning). 
        Перенос возможен только так. Из-за невозможности понять, почему было принято решение
        сложно настраивать сеть. Приходится не менять ее внутренние составляющие,
        а создавать внешние условия, которые узнаются эмпирическими методиками.
        3) Не достаточно быстрая адаптация, как того может требовать окружающий мир. 
        С точки зрения аналитических методов у сетей наблюдается большая адаптивность.
        Это касается RL.
        4) Сложные модели требуют большого объема сетей. В статье, опять же, есть 
        пример обчения тела ходьбе с 17 степенями свободы. При увеличении 
        степеней свободы, не получатется нормально обучить. Для анализа большой 
        сети требуется еще большая сеть. Большая сеть не может работать в 
        real time и склонна к переобучению.
        5) Не все сети могут крутить циклы. Относится к RL.
        6) Не все модели сетей учитывают предыдущие состояния.
        7) Необходимость длительного времени на обученение. Обучение в данном случае выделяется как
        отдельная фаза работы с методом. 
        8) Сложность дообучения. Обучать приходится сразу всем задачам. Иначе при дообучении веса 
        перезапишутся под новую задачу. Есть вид обучения incremental learning. 
        Он подразумевает постоянно постоянно расширяющуюся модель при новых 
        входных данных. Я не слышал об его болшом распространении.
        9) Невозможность интеграции отдельных сетей в одну большую. Т к они имеют 
        разные архитекуры, абсолютные значения весов, механизмов общего обучения.
        В статье, описывается предположение о том, чтобы сверточные для 
        картинок, рекурентные для текста и обучение с подкреплением для 
        генерации движений использовались вместе. Даже если ону сеть 
        присоединяют  другой, то у одной из них, которая уже обучена веса 
        замораживают.
        10) Необходимость разработки архитектуры еще до начала обученя. Допускаю, 
        что есть проекты, где сеть конфигурирует архитектуру, но я не видел, 
        чтобы они получили распространение.

    3.2 Логическое программирование.

        Этот метод ИИ можно обобщить до набора ifов. Его еще часто называют 
        экспертными системами. Эксперт (человек, компетентный в предметной 
        области) составляет правила, через которые пргоняются входные данные
        и область принятия решений сужается. Иногда до конкретного решения,
        иногда до множества решений, иногда до ни одного.
        Достоинства.
        1) Это точный метод, при одинаковых входных условиях будет один и 
        тот же результат.
        Процесс принятия конкретного решеня можно проследить, что легло в 
        его основу и почему оно было принято.
        2) Опыт накопленный специалистами легоко передается машине, 
        через добавление новых условий и корректировки имеющихся.
        Отсутсвует фаза обучения.
        3) Вывод новых решений, которые ранее не были записаны в память.
        Недостатки.
        1) Экспертная система требует постоянного обновления своей базы 
        знаний.
        2) Неумение выявлять новые неизвестные ситуации, не описанные правилами.
        3) Отсутсвие самообучения.

    3.3 Нечеткая логика

        Является определенной надстройкой к логическому программированию.
        Некоторые авторы выделяют ее в отдельный матод. Добавляет возможность
        дробного значения выраженности признака. Не true или false, а например 0.3.
        Для работы на признаками требуются доработаннные операторы.
        Чать признаков наследуется от логического программирования.
        Достоинства.
        1) Большая гибкость в незнакомой ситуации.
        Недостатки.
        2) Нечеткие системы не дают точных ответов. Связано с коверацией
        типов данных из дробных в целые.

    3.4 Генетические алгоритмы

        Решение делится на признаки. Признаки комбинируются в соответсвтвии с 
        законами генетики и эволюции. Условные особи (решений с набором функций)
        виживают в том случае, если оказались наиболее результативны по сравнению с
        другими решениями. Далее они дают потомство, сочетающее в себе скрещенные 
        признаки от двух лучших решений и алгоритм повторяется.
        Достоинства.
        1) Подходит для неформализованных задач.
        2) Высокий параллелизм.
        Недостатки.
        1) Приближенный метод.
        2) Качество решения зависит от времени расчета.

    3.5 Статистические методы
    
        Предлагают вероятностные решения, когда есть статистика.
        Достоинства.
        1) Не требуют точных данных для составления выборки.
        2) Обоснованность решений.
        3) Простота в эксплуатации.
        Недостатки.
        1) Необходима длинная статистическая выборка.
        2) Решение принимается не в зависимости от состояния объекта, а от истории выборки.
        3) Не работают без шаблона типичного поведения.

    3.6 Ассоциативная память

        Находил данный метод в одной из книжек. Плохо в нем разобрался.
        https://disk.yandex.ru/i/MfLZAhqC4lK66g
        Достоинства.
        1) Самоорганизующаяся система.
        2) Адаптируется к изменениям.
        Недостатки.
        1) Необходима обучающая выборка.

    3.7 Выводы

        Большинство бытовых задачь уже понятно как делать и нужно только 
            объяснить машине как их делать. По крайней мере так мы поступаем с 
            детьми. Человек учится на длине датасета 1 ну может быть 10. Датасеты 
            однозначное зло.

        Забегая вперед, скажем, что понимать 
            почему сеть принила то или иное реение - очень хочется, если не сказать 
            жизненно необходимо, для дальнейшей настройки сети. Выделился термин - 
            объяснимый ИИ. Вспоминается проект гугла.
            https://cloud.google.com/explainable-ai/
            Судя по картинке, они как раз показывают промежуточные слои, хотя, я 
            сильно не вчитывался. Как минимум важен факт выделения термина, 
            заинтерисованности гугла. Есть проекты изъятия правил из сети в виде 
            математики. Это опять же предназначено для человека.

        Часть опыта у людей передается по 
            наследству, но это связано скорее с управлением организмом. Часть 
            передается с воспитанием и длится порядка 20 лет. С учетом накопленного 
            опыта дообучение может происходить буквально в пару предложений.


        Перечислим основные недостатки, которые не допустимы при выборе метода для системы управления МРК и системах ему подобных.
        1) Невозможность объяснения решения, так как трудно будет понять как настраивать систему на работоспособность, кроме как экспериментальным методом. В противном случае, придется создавать систему объяснения решений, которая может быть больше и сложнее, чем сама исследуемая система.




        2) Неточность принимаемого решения, так как решение необходимое для результата может содержаться в нерассмотренной области.
        3) Необходимость обучающей выборки. Она может быть недостаточно объемна и на ее подготовку нужны ресурсы.
        Нейронные сети имеют весомые достоинства, но их нельзя применить из-за необходимости датасетов и отсутсвия видимости процесса приянятия решения. Ассоциативной памяти и статистическим  алгоритмам тоже нужна выборка. Генетические алгоритмы — не могут объяснить решение и являются приближенным методом. Не упомянул в общем списке сигнатурные методы. Они сравнвают входную ситуацию с шаблонами и отрабатывают заложенный сценарий. Эти методы нуждаются в постоянном обновлении базы и не адаптивные. 
        В качестве основы остается выбрать логическое программирование. Оно дает обоснованность решений, выдачей применимых правил. Принимает решение точно, так как основывается на опыте экспертов. Не нуждается в большой обучающей выборке, так как правила будут емко содержать законы предметной области. 
        
        Нечеткую логику можно расценить как надстройку над логическим программированием,
        
        потому что оно использует тип данных — нечеткое множество и соответствующие операции над ним, что может помочь в незнакомых ситуациях принять системе решение, когда обычные правила не дадут положительного ответа.

        В ЭС знания представляются в виде правил.
        Одним из достоинств интеллектуальных систем является их адаптивность и способность к самообучению. Такими свойствами обладают нейронные сети, генетические алгоритмы и ассоциативная память. Но в связи с описанными выше недостатками их нельзя использовать в качестве основы. Если основная экспертная система не сможет выдать определенное решение, то можно прибегнуть к генерации новых правили или выдачи приближенного решения с помощью одного из выше упомянутых методов.
        Возникает необходимость в разработке собственной ЭС. Используя ЛП мы приобретаем ряд преимуществ по сравнению с языками высокого уровня при написании программ.
        При попытке найти ответ на запрос, pyDatalog будет автоматически искать правила или факты, которые могут вернуть результат на запрос, иначе  это пришлось бы делать вручную, прописывая алгоритм. Если решения не найдено, то будет дан ответ об отсутствии такого утверждения. Например, удобно писать рекурсивные функции, выход из которых и условия проваливания pyDatalog контролирует сам, не нагружая программиста. Обеспечивается более высокий уровень абстракции и человеку проще переводить свои мысли в инструкции для машины и контролировать ход выполнения программы.
        

        Мне достаточно было их факта существования, чтобы сделать выводы и забыть.

4.0 Предлагаемое решение

    графовый компьютер

    тз в предложение включить

    Посмотреть можно ли дополнить тз этими свойсвтами
    https://en.wikipedia.org/wiki/Artificial_general_intelligence
    https://ru.wikipedia.org/wiki/Сильный_и_слабый_искусственные_интеллекты