###############
# Уже сделано #
###############

0. Консольное приложение
    На вход подаются слова, разделенные пробелом в виде предложения.
    Специальные символы удаляются.

1. Кадое слово представляется в виде понятия.
    Если слово ранее не употреблялось, для него автоматически создается .json 
    файл, имя которого совпадаетс с самим понятием. Внутри может быть либо
    ссылка на файл .py, либо список определений из других понтятий. Добавление
    ссылки на .py на текущий момент производится в ручную.

2. Выполнение программ.
    Слова в предложении последовательно выполняются в виде отдельных программ
    (процессов). Каждому процессу передаются остальные слова в предложении в виде
    параметров. Так же доступен результат выполнения предыдущих слов в данном 
    предложении в файле output.json.

3. Отображение графа.
    Все слова в предложении делятся на пары, образуюя связи в графе.
    Граф записывается в файл local_graph.json виде списка связей. При выполнении 
    слов может быть дозапись в граф. Граф из json конвертируется в формать xdot
    и отображется.

4. Поиск определения.
    Определение - это определенный список узлов, который обязателен для описания
    опреляемого понятия. Происходит по наложению подграфа на граф. Перед этим 
    происходт сужение поиска.

5. Тестовые диалоги.
    В папке dialogs есть диалоги, демонстрирующие возможности.
    На текущий момент это создание определения, берущего информацию от датчиков
    (second.txt). Рекурсивное проваливание в граф  (recursion.txt). Создание
    определений из других определений (year.txt). Диалоги планируют пополнятся.

6. Часть функций из файла main.py вынесена в util/functions.py
    Имя utils оказалось зарезервированным в python, поеэтому без буквы s.

7. Деление на локальный и глобальный граф.
    При ведении диалога, информация сохраняется в локальный граф. Существует 
    служебное слово для переноса понятий в глобальный граф. Служебные слова не 
    переносятся. Локальный граф очищается при новом запуске.

8. Истории
    История это опрелеение в виде последовательнсти событий.
    Каждое событие является понятием со связю с меткой времени, которое тоже
    в свою очередь понятие. На текущий момент метки времени абосолютные и 
    создаются в момент времени сообщения в диалоге.

выше надо будет актуализировать

9. Структуры
    Есть структура классов в понимании ООП
        Класс нода и от него унаследуются классы класс и объект.
        Одна из необъодимостей существования - отрисовка.
        Вторая создание определений на подобии двойки.
    Структура предметной области
        У каждого класса может быть несколько объектов.
        Все они по прежнему являются нодами.
    база знаний
        хранит только список классов.
        у каждого класса ссылки на объекты.
        каждый объект имеет id.

        Иллюстрация
        подсчет болтиков
        создаем клас болт, считаем его эеземпляры
        создаем класс количество, связываем его с цифрой
        удаляем экзмепляры всех болтов