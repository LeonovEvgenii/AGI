####################
# Принятые решения #
####################

1. Не использую формат xdot или graphviz для хранения графа.
    Потому что были сложности с представлением подграфа в графе.
    В частности нельзя менять форму рамки подграфа, она всегда прямоугольная.
    Нельзя провести стрелку от субграфа к субграфу. В graphviz одно пространство 
    имен. Это значит будет кашка в грфе, когда одно слово используется в нескольких
    определениях.
    В конце концов, это не редактор для рисования, а средство отображения только 
    графов. Храню граф в собственном формате, для подключения любых дргуих средств 
    рисования. Храню в фале json для просмотра после выполнения программы.
    Думал еще файлы .py как то макировать на картинке.

2. Не использую отдельные режимы вопроса или ответа.
    Любое выражение без явного упоминания знака вопроса можно расценить как вопрос
    и как ответ. Предлагаю знак вопроса парсить как отдельное слово, подразумевающее
    что должен быть дан обязательный ответ. Тесты с вопросами и ответами 
    обязательно будут. 
    Когда люди рассказывают историю они не просят выполнять код.
    Они используют код внутри себя для сохранения и моделирования. И не просят
    собеседника об этом принудительно.

3. Рекурсивное проваливание отсутсвует.
    Проваливание идет только по запросу. Одно и тоже слово может исполняться, а
    может использоваться как параметр. Если использовать сложные высокоуровневые
    слова, то проваливание может быть очень долгим или не закончиться вовсе.
    Определение это список слов с глубиной проваливания
    не дальче, чем 1. Когда человеку говорят предложение, у него поднимается 
    сразу весь код слова, ограниченный контекстом и не рекурсивный. 
    Произойдет проваливание только если текстом
    попросить рассказать другие определения.

5. Отказался от использования класса.
    В файле удобней смотреть промежуточные состояния. Допускаю
    использование класса как внутреннего формата для более
    быстрых расчетов между форматом хранения графа в файле и 
    выдачей ответа.

6. Отсутсвие имен и типов ребер.
    Вся информация и код содержится только в узлах. У ребер учитывается только
    факт их наличия.

7. Не использую режимы работы или ключевые слова.
    Этот функционал все равно придется переносить в слова. Есть служебные слова. 
    Их необходимо писать в тексте и связи к ним так же протягиваются.

8. Слова выполняются последовательно.
    Если параметры передаются одновременно, то проверка на их ненужность происходит
    в каждом слове, что избыточно. Во вторых, человек произносит и слушает слова
    все же последовательно, это в программу они попадают все сразу.
    Когда нибудь, надеюсь, можно будет в реал тайм печать разбирать.
    Так же, есть предложения, где порядок важен, например направление вектора.
    Пример: 3 минус 2 и 2 минус 3 принципиальная разница, а машка вредина, отдай или
    вредина машка, отдай - без разницы. Просто их внутрениий код допускает
    параметр с любой стороны, а с цифрами нет.

9. Ссылки на слова сохраняются при любой реплике.
    Когда-то для этого нужно было писать отдельное слово.

10. Запись связей локального графа в одном отдельном файле.
    Чтобы чистить было удобно, а не бегать по всм .jsonам. Так же можно 
    подключить другой отрисовцик.

11. Связи в новом предложении образуются парами, а не все со всеми.
    Кашка получается. После выполнения кода слов, могут новые связи пробрасыватся,
    помимо последовательных пар. Если определение создается, то на все слова в 
    определнии связи делаются.

12. Почему .json для понятий, а не сериализация.
    .json человекочитаемый, парсимый библиотеками. Сериализация не читается при
    неработающей программе.

13. Связи не имеют направления.

14. Редми использует формать rst.
    Более развернутые ответы.
    https://www.zverovich.net/2016/06/16/rst-vs-markdown.html
    md попроще и лучше подходит для краткосрочной перспективы. Вероятно,
    оформляется на html (не проверял).
    Между doxygen и sphinx, рекоедую второе. Он как минимум красивше.
    Между json и yaml тоже второе. Там больше возможностей.
    В этой репе yaml никак не используется.

15. Не добавлять shields в редми.
    Мой репозиторий не нашелся.
    https://shields.io/

16. Необходимость хранения не только связей в графе, но и списка всех узлов.
    Если удалить связь и информация об узле блыла только в этой связи (в не
    удаленном втором члене), то он тоже не отображается, т к нигде не фигурирует.

17. При удаленнии узла никакой информации об успешности операции не выводится.
    Вывод print занят ответом для образования новых нод.
    Файл output не задействуется.

18. Последовательная обработка реплик для целей.
    Деление на два процесса общения с человеком и выполнение подцелей дает
    параллельную обработку и добавляет сложность в обслуживании.
    Пока отложу данный функционал.
    Второй терминал придется делать.

19. Использование subprocess вместо treading
    В treading нельзя запускать код, который может измениться в 
    процессе выполнения программы.
    Я читал про шаблон проектирования "фабрика".
    Но не увидел в его реализации изменяющегося кода на лету. 
    Код меняется заранее известными способами.
    Поэтому программы хранятся в отдельных файлах, чтобы иметь 
    возможность меняться.
    Данные хранятся параллельно в классах для быстрой и местами 
    удобной работы.
    И синхранизируются при выполнении нод и мест сохранения в файлы.

20. Расположение методов создания и обновления фалов нод классов в
классе базы знаний, а не в самом классе класс
    Для быстрой смены файлов с json на другой способ хранения.

21. Необходимость доступа в subprocess к файлам базы знаний.
    Для сохранения новых нод и связей определений.

22. Необходимость хардкодения классов и объектов.
    В необходимости наличия понятий классов и объектов сомневаться не приходится
    т к они фигурируют во многих предметных областях.
    Основной вопрос какое отличие межу классом и объектом в памяти.
    На языке понятий я не представляю как сейчас сохранять,
    Поэтому будет отражено в коде.
    Если будет на языке понятий, это может перегрузить граф на текущий момент.
    Для определенных предметных областей.




