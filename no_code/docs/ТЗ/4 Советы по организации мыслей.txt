################################
# Советы по организации мыслей #
################################

1. Оперировать понятиями, а не словами.

2.  Объяснение почему есть код в узле, хотя мы заявляем что должны обойтись без кода.
    
    2.1 Уже есть досаточно большой объем кода написанный людьми. Было бы глупо его не использовать.
        
        Вспомним арифметику. Знания о том как складывать числа уже имеются и зашиты в операторе плюс. Мы используем времмно это готовое решение на ЯП. Есть куча других языков, например грфический или нейросетевой, которые могут предоставить альтернативное решение для знака. В начале мы еще не знаем альтернативных методов и все они тоже должны будут быть записаны словесно.

        Даже если мы используем ЯП в определении. То выход этой минимпрограммы должен максимально использоваться в языковом уровне. То есть, связи до узлов, новые узлы.
    
    2.2 Понятие может быть программой. Можно ли избавиться от программ в понятиях? Как программы представлены в голове - нейронами. Один нейрон - не одно понятие. Даже сами понятия это небольшие сетки. Поэтому в каждом понятии в перспективе будет программа внутри или сетка. Важное отличие от всего, что хранится внутри - наличие названия (заголовка), как все это представлно в языке.
    
    2.3 Как должен выглядеть процесс написания программ внутри узлов. На ЯП, тут все понятно. На понятиях, должно использоваться минимальное количество кода. Понятие выглядит как последовательность узлов и связей между узлами, все это сохранено под одним адресом (заголовком). Да, в каждом узле может быть код. Но интерес в том, что при оперировании понятиями, чье определение состоит из других понятий - кода нет. Назовем оперироваие понятиями, в которых уже нет кода - верним уровнем или языковым. Да, программа определения знака это подграф в графе.

    Программа может писаться как на языковом уровне так и на языке программирования
    К написанию на чистом языке мы сейчас не готовы. На верхнем уровне вообще не будет ЯП.

3. Можно свести все к if-else.
    Соглашусь. Думаю все это сводится к коннекционизму. Можно вспомнить язык 
    даталог, на котором храняться ограничения и делаются логические выводы. Там 
    все к ифам сводится. У нас есть ифы, которые администрируют граф. От данного 
    подхода, откажемся, когда перейдем к верхнему уровню.

4. Сложные понятия
    Если сущность не имеет физических характерисиик. абстракция, вина, 
    обещание - нет это все программы и они все завязаны на физ характеристиках

5. Схожесть с языком программирования
    Да, это действительно так, но позже мы его существенно расширим и переопределим.

6. сущществительное : обладает набором характеристик геометрические, поведенческие
    геометрия - тоже программа - набор констант

7. Наличие иерархии в графе.
    Иерархия есть в определенных учатках графа. Но из за принятого решения не
    использовать рекурсию, используется она не всегда. Отдельные графы иерархий и 
    историй делать не буду. Все в одном будет.

8. Определение креативности 
    Креативность - количество точек зрения на одну и ту же ситуацию, проблему.
    Любопытсво, основной критерий.

9. Красивую архитектуру можно составить, только попробовав многие альтернативы.

