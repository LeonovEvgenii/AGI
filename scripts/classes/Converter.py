from scripts.classes.Graph import Graph


# я хотел сделать этот класс абстрактным,
# но тогда в нем ничего нельзя будет реализовывать.
# И нативно в питоне нельзя создавать абстрактные классы,
# а только с библиотекой abc.
# Хочу писать реализацию и не подключать библиотеку,
# поэтому оставлю так.
class Converter():

    # Сначала хотел создать два касса конверторов:
    # один для преобразования контента в граф,
    # другой, наоборот, из графа в контент.
    # Но, т к они могут работать с общими библиотеками, решил оставить в одном классе.
    output_content = None
    input_content = None

    output_graph = None # используется для преобразования контента в граф
    input_graph = None # используется для преобразования графа в контент

    def __init__(self):
        self.output_graph = Graph("входной_граф")

    def get_graph(self):
        return self.output_graph

    def get_content(self):
        # Не возникает неоднозначности какой контент возвращать (входной или выходной).
        # Однозначно выходной (после обработки).
        # Входной бесполезно, т к он не обрабатывался.
        # Так же и с графом.
        # Имеет смысл возвращать только переработанный граф из контента.
        # Подаваемый граф на исполнительный механизм и так уже известен был до подачи в конвертер.
        return self.output_content

    def content_to_graph(self):
        pass

    def graph_to_content(self):
        pass

    def filter(self):
        pass